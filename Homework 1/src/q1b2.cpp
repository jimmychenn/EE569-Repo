// This sample code reads in image data from a RAW image file and // writes it into another file// NOTE:	The code assumes that the image is of size 256 x 256 and is in the//			RAW format. You will need to make corresponding changes to//			accommodate images of different sizes and/or types#include <stdio.h>#include <iostream>#include <stdlib.h>#include <string>using namespace std;//returns index of highest value in RGB arrayint maxIndex(unsigned char* RGB) {	if(RGB[0] > RGB[1]) {		if(RGB[0] > RGB[2])			return 0;		else			return 2;	} else {		if(RGB[1] > RGB[2])			return 1;		else			return 2;	}}int minIndex(unsigned char* RGB) {	if(RGB[0] < RGB[1]) {		if(RGB[0] < RGB[2])			return 0;		else			return 2;	} else {		if(RGB[1] < RGB[2])			return 1;		else			return 2;	}}int getH(float* RGB, float C, int index) {	float s1;	float s2;	float s3;	//R value	if(index == 0) {		s1 = RGB[1] - RGB[2];		s2 = s1 / C;		s3 = (s2);	}	//G value	if(index == 1) {		s1 = RGB[2] - RGB[0];		s2 = s1 / C;		s3 = s2 + 2;	}	if(index == 2) {		s1 = RGB[0] - RGB[1];		s2 = s1 / C;		s3 = s2 + 4;	}	if(s3 < 0.f) {		s3 = 6.f + s3;	}	/*	cout << "s1:" << s1;	cout << " s2:" << s2;	cout << " s3:" << s3 << endl;	*/	return (int) (60 * s3);}float getL(float M, float m) {	return (M + m) / 2;}int getS(float L, float C) {	if(L == 0) {		return 0;	} else if( L > 0.f && L < 0.5f) {		return C / (2 * L) * 100.f;	} else {		return C / (2 - 2 * L) * 100.f;	}}int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Width = 256;	int Height = 256;		// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [width = 256] [height = 256]" << endl;		return 0;	}		// Check if image is grayscale or color	if (argc < 4){		BytesPerPixel = 1; // default is grey image	} 	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 6){			Width = atoi(argv[4]);			Height = atoi(argv[5]);		}	}		// Allocate image data array	unsigned char Imagedata[Width][Height][BytesPerPixel];	// Read image (filename specified by first argument) into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Width*Height*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	unsigned char ImagedataH[Width][Height];	unsigned char ImagedataS[Width][Height];	unsigned char ImagedataL[Width][Height];	int H, S; float L;	for(int i = 0; i < Width; i++) {		for(int j = 0; j < Height; j++) {			float M, m, C;			int k;			float ImagedataF[3];			ImagedataF[0] = ((float) Imagedata[i][j][0]) / 255.f;			ImagedataF[1] = ((float) Imagedata[i][j][1]) / 255.f;			ImagedataF[2] = ((float) Imagedata[i][j][2]) / 255.f;			k = minIndex(Imagedata[i][j]);			m = ImagedataF[k];			k = maxIndex(Imagedata[i][j]);			M = ImagedataF[k];			C = (M - m);			H = getH(ImagedataF, C, k);			L = getL(M, m);			S = getS(L, C);			L *= 100;			int Hnorm = H/360.f * 255.f;			int Lnorm = L/100.f * 255.f;			int Snorm = S/100.f * 255.f;			/*			cout << "R:" << ImagedataF[0];			cout << " G:" << ImagedataF[1];			cout << " B:" << ImagedataF[2] << endl;			cout << "R:" << (int) Imagedata[i][j][0];			cout << " G:" << (int) Imagedata[i][j][1];			cout << " B:" << (int) Imagedata[i][j][2] << endl;			cout << "M:" << M << " m:" << m << " C:" << C << endl;			cout << "H:" << H << " L:" << L << " S:" << S << endl;			cout << "H:" << Hnorm << " L:" << Lnorm << " S:" << Snorm << endl << endl;			*/			ImagedataH[i][j] = Hnorm;			ImagedataS[i][j] = Snorm;			ImagedataL[i][j] = Lnorm;		}	}	// Write image data (filename specified by second argument) from image data matrix	string toName(argv[2]);	string fileH = toName + "H.raw";	string fileS = toName + "S.raw";	string fileL = toName + "L.raw";	//hue represents the actual color to be represented.	if (!(file=fopen(fileH.c_str(),"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(ImagedataH, sizeof(unsigned char), Width*Height, file);	fclose(file);	//Saturation represents /* TODO */ read about what Saturation is!	if (!(file=fopen(fileS.c_str(),"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(ImagedataS, sizeof(unsigned char), Width*Height, file);	fclose(file);	//Lightness represents the intensity of the color. 0% being none of the color (black) and 100% being all the color (white)	if (!(file=fopen(fileL.c_str(),"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(ImagedataL, sizeof(unsigned char), Width*Height, file);	fclose(file); 	return 0;}