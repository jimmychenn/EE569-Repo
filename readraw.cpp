// This sample code reads in image data from a RAW image file and // writes it into another file// NOTE:	The code assumes that the image is of size 256 x 256 and is in the//			RAW format. You will need to make corresponding changes to//			accommodate images of different sizes and/or types#include <stdio.h>#include <iostream>#include <stdlib.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Width = 256;	int Height = 256;		// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [width = 256] [height = 256]" << endl;		return 0;	}		// Check if image is grayscale or color	if (argc < 4){		BytesPerPixel = 1; // default is grey image	} 	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 6){			Width = atoi(argv[4]);			Height = atoi(argv[5]);		}	}		// Allocate image data array	unsigned char Imagedata[Width][Height][BytesPerPixel];	// Read image (filename specified by first argument) into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Width*Height*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	int x1, y1, x2, y2;	int cWidth, cHeight;	cout << "Enter top-left x-coordinate" << endl;	cin >> x1;	cout << "Enter top-left y-coordinate" << endl;	cin >> y1;	cout << "Enter bottom-right x-coordinate" << endl;	cin >> x2;	cout << "Enter bottom-right y-coordinate" << endl;	cin >> y2;	cWidth = x2 - x1 + 1;	cHeight = y2 - y1 + 1;	printf("Dimensions: %d x %d\n", cWidth, cHeight);	unsigned char croppedImage[cWidth][cHeight][BytesPerPixel];	for(int i = 0; i < cWidth; i++) {		for(int j = 0; j < cHeight; j++) {			for(int k = 0; k < BytesPerPixel; k++) {				croppedImage[i][j][k] = Imagedata[i + x1 - 1][j + y1 - 1][k];			}		}	}	// Write image data (filename specified by second argument) from image data matrix	if (!(file=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(croppedImage, sizeof(unsigned char), cWidth*cHeight*BytesPerPixel, file);	fclose(file);	return 0;}