#ifndef UNCOND_MASKS_H
#define UNCOND_MASKS_H

three_d_int get_unconditional_masks() {
	three_d_int masks(boost::extents[3][3][37]);
	for(int i = 0; i < masks.shape()[2]; i++) {
		masks[1][1][i] = 1;
	}
	//2 is don't care. when filtering, skip over values of 2
	//3 is A,B,C where any combination of them is 1. When filtering or the result of each of these.
	int j = 0;
	masks[0][2][j++] = 1;
	masks[0][0][j++] = 1;
	masks[2][1][j++] = 1;
	masks[1][2][j++] = 1;
	masks[1][2][j] = 1;
	masks[0][2][j++] = 1;
	masks[0][1][j] = 1;
	masks[0][2][j++] = 1;
	masks[0][1][j] = 1;
	masks[0][0][j++] = 1;
	masks[0][0][j] = 1;
	masks[1][0][j++] = 1;
	masks[1][0][j] = 1;
	masks[2][0][j++] = 1;
	masks[2][0][j] = 1;
	masks[2][1][j++] = 1;
	masks[2][1][j] = 1;
	masks[2][2][j++] = 1;
	masks[2][2][j] = 1;
	masks[1][2][j++] = 1;
	masks[0][1][j] = 1;
	masks[0][2][j] = 1;
	masks[1][0][j++] = 1;
	masks[0][0][j] = 1;
	masks[0][1][j] = 1;
	masks[1][2][j++] = 1;
	masks[0][1][j] = 1;
	masks[1][2][j] = 1;
	masks[2][2][j++] = 1;
	masks[0][2][j] = 1;
	masks[1][2][j] = 1;
	masks[2][1][j++] = 1;
	masks[0][2][j] = 1;
	masks[2][0][j] = 1;
	masks[0][1][j] = 3;
	masks[1][2][j++] = 3;
	masks[0][0][j] = 1;
	masks[2][2][j] = 1;
	masks[1][0][j] = 3;
	masks[0][1][j++] = 3;
	masks[0][2][j] = 1;
	masks[2][0][j] = 1;
	masks[1][0][j] = 3;
	masks[2][1][j++] = 3;
	masks[0][0][j] = 1;
	masks[2][2][j] = 1;
	masks[1][2][j] = 3;
	masks[2][1][j++] = 3;
	masks[0][0][j] = 1;
	masks[0][1][j] = 1;
	masks[1][0][j] = 1;
	masks[0][2][j] = 2;
	masks[1][2][j] = 2;
	masks[2][0][j] = 2;
	masks[2][1][j] = 2;
	masks[2][2][j++] = 2;
	masks[0][0][j] = 2;
	masks[0][1][j] = 1;
	masks[1][0][j] = 1;
	masks[1][2][j] = 1;
	masks[2][0][j++] = 2;
	masks[0][1][j] = 1;
	masks[0][2][j] = 2;
	masks[1][0][j] = 1;
	masks[1][2][j] = 1;
	masks[2][2][j++] = 2;
	masks[0][2][j] = 2;
	masks[1][0][j] = 1;
	masks[2][2][j] = 2;
	masks[1][2][j] = 1;
	masks[2][1][j++] = 1;
	masks[0][0][j] = 2;
	masks[1][0][j] = 1;
	masks[2][0][j] = 2;
	masks[1][2][j] = 1;
	masks[2][1][j++] = 1;
	masks[0][0][j] = 2;
	masks[0][1][j] = 1;
	masks[0][2][j] = 2;
	masks[1][0][j] = 1;
	masks[2][1][j++] = 1;
	masks[0][1][j] = 1;
	masks[1][0][j] = 1;
	masks[2][0][j] = 2;
	masks[2][1][j] = 1;
	masks[2][2][j++] = 2;
	masks[0][1][j] = 1;
	masks[1][2][j] = 1;
	masks[2][0][j] = 2;
	masks[2][1][j] = 1;
	masks[2][2][j++] = 2;
	masks[0][0][j] = 2;
	masks[0][1][j] = 1;
	masks[0][2][j] = 2;
	masks[1][2][j] = 1;
	masks[2][1][j++] = 1;
	masks[0][0][j] = 1;
	masks[0][1][j] = 2;
	masks[0][2][j] = 1;
	masks[1][0][j] = 2;
	masks[1][2][j] = 2;
	masks[2][0][j] = 3;
	masks[2][1][j] = 3;
	masks[2][2][j++] = 3;
	masks[0][0][j] = 1;
	masks[0][1][j] = 2;
	masks[0][2][j] = 3;
	masks[1][0][j] = 2;
	masks[1][2][j] = 3;
	masks[2][0][j] = 1;
	masks[2][1][j] = 2;
	masks[2][2][j++] = 3;
	masks[0][0][j] = 3;
	masks[0][1][j] = 3;
	masks[0][2][j] = 3;
	masks[1][0][j] = 2;
	masks[1][2][j] = 2;
	masks[2][0][j] = 1;
	masks[2][1][j] = 2;
	masks[2][2][j++] = 1;
	masks[0][0][j] = 3;
	masks[0][1][j] = 2;
	masks[0][2][j] = 1;
	masks[1][0][j] = 3;
	masks[1][2][j] = 2;
	masks[2][0][j] = 3;
	masks[2][1][j] = 2;
	masks[2][2][j++] = 1;
	masks[0][0][j] = 2;
	masks[0][1][j] = 1;
	masks[1][2][j] = 1;
	masks[2][0][j] = 1;
	masks[2][2][j++] = 2;
	masks[0][1][j] = 1;
	masks[0][2][j] = 2;
	masks[1][0][j] = 1;
	masks[2][0][j] = 2;
	masks[2][2][j++] = 1;
	masks[0][0][j] = 2;
	masks[0][2][j] = 1;
	masks[1][0][j] = 1;
	masks[2][1][j] = 1;
	masks[2][2][j++] = 2;
	masks[0][0][j] = 1;
	masks[0][2][j] = 2;
	masks[1][2][j] = 1;
	masks[2][0][j] = 2;
	masks[2][1][j] = 1;

	return masks;

}

#endif